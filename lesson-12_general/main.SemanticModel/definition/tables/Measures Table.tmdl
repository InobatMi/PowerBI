table 'Measures Table'
	lineageTag: ecb8f43d-185c-486e-90df-fc0fc1482d81

	measure 'The Higest Budget' = calculate(MAX(Movies[Budget]),all(Movies))
		formatString: 0
		displayFolder: Higest Budget
		lineageTag: 4e174b51-7154-4dcc-95c1-e6d46426b379

	measure 'The Movie with Higest Budget' =
			
			VAR max_budget = [The Higest Budget]
			RETURN "🎥 " & CALCULATE(VALUES(Movies[Title]),Movies[Budget] = max_budget,all(Movies))
		displayFolder: Higest Budget
		lineageTag: 5f534f34-29fc-4fca-ab2b-3f981d2cec99

	measure 'The Higest Box Office' = calculate(MAX(Movies[Box Office]),all(Movies))
		formatString: 0
		displayFolder: Higest Box
		lineageTag: 76ac5288-309d-40ac-ac32-721063d355f3

	measure 'The Movie with Higest Box Office' =
			
			VAR max_box_office = [The Higest Box Office]
			RETURN CALCULATE(VALUES(Movies[Title]),Movies[Box Office] = max_box_office,all(Movies))
		displayFolder: Higest Box
		lineageTag: ddf7e4d3-9ee4-472c-9a7f-fd84953031a9

	measure 'The Movie DR with Higest Budget' =
			
			VAR max_budget = [The Higest Budget]
			RETURN "🕵️ " & CALCULATE(VALUES(Movies[Director]),Movies[Budget] = max_budget,all(Movies))
		displayFolder: Higest Budget
		lineageTag: e81073c0-7427-4e75-8a06-82fd5526bdaa

	measure 'The Movie DR with Higest Box Office' =
			
			VAR max_budget = [The Higest Box Office]
			RETURN CALCULATE(VALUES(Movies[Director]),Movies[Box Office] = max_budget,all(Movies))
		displayFolder: Higest Box
		lineageTag: 1d969b12-cfd9-4b37-a927-226f74d8f36b

	measure 'Total Budget' = sum(Movies[Budget])
		formatString: 0
		lineageTag: 585c7917-b92f-4cd0-87f2-f9e7343d2675

	measure 'Movie Title' =
			
			VAR movie_title = SELECTEDVALUE(Movies[Title])
			Return if(NOT(ISBLANK(movie_title)),"🎥 " & movie_title,"🎥 All")
		lineageTag: f7d14959-bdab-4089-b758-ab32dad7f1e3

	measure 'Movie DR' =
			
			VAR movie_title = SELECTEDVALUE(Movies[Title])
			VAR max_relasead_date = CALCULATE(MAX(Movies[Release Date]),Movies[Title] = movie_title)
			VAR movie_dr = CALCULATE(values(Movies[Director]),Movies[Title] = movie_title,Movies[Release Date] = max_relasead_date)
			Return if(
			    AND(NOT(ISBLANK(movie_title)),NOT(ISBLANK(movie_dr))),"🕵️ " & movie_dr,"🕵️ All")
		lineageTag: 8f663b3d-bd15-4945-b9de-ceff9a7b1e02

	measure 'profit margin' =
			
			VAR total_box = SUM(Movies[Box Office])
			VAR total_budget = [Total Budget]
			VAR _diff = total_box - total_budget
			VAR _rezult = if(AND(NOT(ISBLANK(total_box)),NOT(ISBLANK(total_budget))),_diff/[Total Budget],"No Data")
			Return _rezult
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 567aacd7-bfb8-4790-a385-003ba2732ecd

	measure total_box = SUM(Movies[Box Office])
		formatString: 0
		lineageTag: d9d364e3-4d1c-4311-8c75-70d24891cb1e

	measure 'Total Box Office lates year' =
			
			VAR max_date = MAX(Movies[Release Date])
			VAR start_of_year = DATE(YEAR(max_date),1,1)
			VAR end_of_year = DATE(YEAR(max_date),12,31)
			VAR total_box_lates = CALCULATE([total_box],Movies[Release Date]>=start_of_year,Movies[Release Date]<=end_of_year)
			Return total_box_lates
		formatString: 0
		lineageTag: d02db92b-8b7f-4e80-8b4f-696d17ab8205

	measure 'Total Box Office 5 years ago' =
			
			VAR max_date = MAX(Movies[Release Date])
			VAR start_of_year = DATE(YEAR(max_date) - 5,1,1)
			VAR end_of_year = DATE(YEAR(max_date) - 5,12,31)
			VAR total_box_lates = CALCULATE([total_box],Movies[Release Date]>=start_of_year,Movies[Release Date]<=end_of_year)
			Return total_box_lates
		formatString: 0
		lineageTag: 922ef072-dd73-4e51-8466-97ac9fdca261

	measure '% latest year vs % years prior' =
			(
			[Total Box Office lates year] - [Total Box Office 5 years ago]) / [Total Box Office 5 years ago]
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 6daa9dba-bf0a-43ce-b6e6-67bce4ce5fdb

	partition 'Measures Table' = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i44FAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
				    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}}),
				    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"Column1"})
				in
				    #"Removed Columns"

	annotation PBI_ResultType = Table

