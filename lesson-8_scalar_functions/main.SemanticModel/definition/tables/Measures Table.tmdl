table 'Measures Table'
	lineageTag: 2a634bc7-9827-4767-b806-4a602ffd612e

	measure 'Total sales' = SUM(FactInternetSales[SalesAmount])
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: Aggregation
		lineageTag: aacea769-0058-48f4-9f95-4feb44a3585c

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'total sales 2' = SUM(FactInternetSales[salesforeachpro])
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: Aggregation
		lineageTag: 25152758-3c85-47eb-95d6-67c96d263757

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'total sales 3' = SUMX(FactInternetSales, FactInternetSales[OrderQuantity] * FactInternetSales[UnitPrice])
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: Aggregation
		lineageTag: dd3927d4-54b6-44b2-bed3-600534cba0c5

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'counta ex' = COUNTA(DimCustomer[EnglishEducation])
		formatString: 0
		displayFolder: Aggregation
		lineageTag: 641a3ac6-6536-4f09-b5c4-decc3f16e1c9

	measure distinctcount = DISTINCTCOUNT(DimCustomer[EnglishEducation])
		formatString: 0
		displayFolder: Aggregation
		lineageTag: ec1c9cef-6c74-40fa-bc3b-780a6e3b990b

	measure 'count rows ex' = COUNTROWS(DimCustomer)
		formatString: 0.00
		displayFolder: Aggregation
		lineageTag: 3a4ac56d-b78d-415c-b5b7-7075b590fc31

	measure 'total customers (males)' = CALCULATE(COUNTROWS(DimCustomer),FILTER(DimCustomer,DimCustomer[Gender] ="M"))
		formatString: 0
		displayFolder: Aggregation
		lineageTag: 568de65e-01cf-4d25-911f-6ad2e0c29fc6

	measure 'total customers (females)' = CALCULATE(COUNTROWS(DimCustomer),FILTER(DimCustomer,DimCustomer[Gender] ="F"))
		formatString: 0
		displayFolder: Aggregation
		lineageTag: 3b9c78dc-fea2-4dfb-9957-bb2b70d52a35

	measure 'customers (concatenatex)' = CONCATENATEX(DimCustomer,DimCustomer[FirstName] & " " & DimCustomer[LastName], ", ")
		displayFolder: Aggregation
		lineageTag: dded616f-c992-4b4c-94a3-29769b5a44bf

	measure 'round ex' = ROUND(1234.587, 1)
		displayFolder: Rounding
		lineageTag: 2f8c25d9-4041-4020-b17b-e1a5529ff169

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'round up ex' = ROUNDUP(1234.785, 2)
		displayFolder: Rounding
		lineageTag: 543ee4a5-a33c-4291-95a7-275db34c7c99

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Mround ex' = MROUND(146,100)
		formatString: 0
		displayFolder: Rounding
		lineageTag: 2cf3212f-71ef-4e1e-b80b-435034e87ff5

	measure 'sqrt ex' = SQRT(15.4)
		displayFolder: Math
		lineageTag: 2e36d186-8ec6-459c-be6e-004d9630b832

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'power ex' = POWER(4, 2)
		displayFolder: Math
		lineageTag: 629a9b02-9511-4f3f-b97e-6bbc17a8c6e1

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'trunc ex' = TRUNC(345.675, 2)
		displayFolder: Math
		lineageTag: 59379f06-ce2e-463a-8f8c-677fabd73610

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'rand ex' = RAND()
		displayFolder: Math
		lineageTag: 79c48a0f-d79a-4226-93e0-d4b0ffc699d2

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'rand between ex' = RANDBETWEEN(4,10)
		formatString: 0
		displayFolder: Math
		lineageTag: 40fa8a18-ff7b-4b69-9ae7-e287e4b82e76

	measure 'if ex student score' =
			
			var strscore = 65
			RETURN if(strscore > 90, "Pass","fail")
		displayFolder: Logical
		lineageTag: eeb12a38-4248-4c39-b868-b01239371796

	measure 'and & or ex' = OR(4<5, 45<26)
		formatString: """TRUE"";""TRUE"";""FALSE"""
		displayFolder: Logical
		lineageTag: 89c1a899-52e1-4d22-bc56-461f3ff6363e

	measure 'not & isblank ex' = IF(NOT(ISBLANK(BLANK())), "pass", "fail")
		displayFolder: Logical
		lineageTag: e815ed53-9311-4560-aec5-fabe2047c0ee

	measure 'true ex' = TRUE()
		formatString: """TRUE"";""TRUE"";""FALSE"""
		displayFolder: Logical
		lineageTag: 34d87d20-dfd4-4535-9e52-050b1310289a

	partition 'Measures Table' = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i44FAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
				    #"Removed Columns" = Table.RemoveColumns(Source,{"Column1"})
				in
				    #"Removed Columns"

	annotation PBI_ResultType = Table

