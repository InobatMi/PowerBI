table 'Measures Table'
	lineageTag: aedbab6d-1db5-47c4-a59b-4e3d5d3f143c

	measure 'Total Sales' = SUM(Movies[Budget])
		formatString: 0
		lineageTag: 538163ef-aa18-4c6a-9238-448f2d037f3d

	measure 'Previous Month Sales' =
			
			CALCULATE(
			    [Total Sales],
			    PREVIOUSMONTH('Date'[Date])
			)
		formatString: 0
		lineageTag: e9b740fc-d994-4e33-86fd-e5cf9b90b920

	measure 'MoM Sales % Change' =
			
			DIVIDE(
			    [Total Sales] - [Previous Month Sales],
			    [Previous Month Sales],
			    0
			)
		formatString: 0%;-0%;0%
		lineageTag: ca245d84-6c60-4ef7-be5c-796478ad922d

	measure 'total movies' = CALCULATE(COUNT(Movies[ID]), ALLEXCEPT(Movies, Movies[Country]))
		formatString: 0
		lineageTag: 34f9478a-3c99-44a7-a8ed-bebceb180bf8

	measure 'Profitable Movies' = CALCULATE(COUNT(Movies[ID]), Movies[profitable_movies] = TRUE(), ALLEXCEPT(Movies,Movies[Country]))
		formatString: 0
		lineageTag: 05aa15e6-a0b5-4246-b3ee-e41195056cbd

	measure '% profitable movies' = [Profitable Movies] / [total movies]
		formatString: 0%;-0%;0%
		lineageTag: a2f42a40-2446-4f64-ade5-cef9e251de0a

	column Column1
		dataType: string
		lineageTag: ea1a8193-da97-41c7-91ee-b523e9225023
		summarizeBy: none
		sourceColumn: Column1

		annotation SummarizationSetBy = Automatic

	partition 'Measures Table' = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i44FAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
				    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}})
				in
				    #"Changed Type"

	annotation PBI_ResultType = Table

